---
#system namespace
apiVersion: v1
kind: Namespace
metadata:
  name: gloo-system



##########################
#                        #
#                        #
#         Gloo           #
#                        #
#                        #
##########################
---
#rbac for gloo
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-role
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["gloo.solo.io/v1"]
  resources: ["upstreams", "virtualhosts"]
  verbs: ["*"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: gloo-cluster-admin-binding
subjects:
- kind: ServiceAccount
  name: default
  namespace: gloo-system
roleRef:
  kind: ClusterRole
  name: gloo-role
  apiGroup: rbac.authorization.k8s.io
---
# gloo pod
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    gloo: control-plane
  name: gloo
  namespace: gloo-system
spec:
  selector:
    matchLabels:
      gloo: control-plane
  replicas: 1
  template:
    metadata:
      labels:
        gloo: control-plane
    spec:
      containers:
      - image: solo-io/gloo:v0.1
        imagePullPolicy: Never
        name: gloo
        ports:
        - containerPort: 8081
          name: http
        env:
        - name: GRPC_TRACE
          value: "all"
        - name: DEBUG
          value: "1"
        command: ["/gloo"]
        args:
        - "--storage.type=kube"
        - "--storage.refreshrate=1m"
        - "--secrets.type=kube"
        - "--secrets.refreshrate=1m"
        - "--xds.port=8081"
        - "--kube.namespace=gloo-system"
---
# gloo service
apiVersion: v1
kind: Service
metadata:
  name: gloo
  labels:
    sevice: gloo
  namespace: gloo-system
spec:
  ports:
  - port: 8081
    protocol: TCP
  selector:
    gloo: control-plane




##########################
#                        #
#                        #
#         Envoy          #
#                        #
#                        #
##########################

---
# envoy deployment
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    gloo: ingress
  name: envoy
  namespace: gloo-system
spec:
  selector:
    matchLabels:
      gloo: ingress
  replicas: 1
  template:
    metadata:
      labels:
        gloo: ingress
    spec:
      containers:
      - image: docker.io/envoyproxy/envoy-alpine:latest
        name: envoy
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8443
          name: https
        - containerPort: 19000
          name: admin
        command: ["envoy"]
        args: ["-c", "/config/envoy.yaml", "--v2-config-only", "--service-cluster", "envoy", "--service-node", "envoy"]
        volumeMounts:
        - name: envoy-config
          mountPath: /config
      volumes:
      - name: envoy-config
        configMap:
          name: envoy-config
---
apiVersion: v1
kind: Service
metadata:
  name: envoy
  labels:
    sevice: envoy
  namespace: gloo-system
spec:
  ports:
  - port: 8080
    protocol: TCP
    name: http
  - port: 8443
    protocol: TCP
    name: https
  selector:
    gloo: ingress
  type: NodePort

---
# envoy configmap
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
  namespace: gloo-system
data:
  envoy.yaml: |
    node:
      cluster: ingress
      id: ingress

    static_resources:
      clusters:

      - name: xds_cluster
        connect_timeout: 5.000s
        hosts:
        - socket_address:
            address: gloo.gloo-system.svc.cluster.local
            port_value: 8081
        http2_protocol_options: {}
        type: STRICT_DNS

    dynamic_resources:
      ads_config:
        api_type: GRPC
        cluster_names:
        - xds_cluster
      cds_config:
        ads: {}
      lds_config:
        ads: {}

    admin:
      access_log_path: /dev/null
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 19000

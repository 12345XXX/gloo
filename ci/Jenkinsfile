#!/usr/bin/env groovy
podTemplate(label: 'gloo-builder',
containers: [
    containerTemplate(
        name: 'jenkins',
        image: 'soloio/jenkins:latest',
        ttyEnabled: true,
        alwaysPullImage: true,
        command: 'cat'),
    containerTemplate(
        name: 'helm',
        image: 'devth/helm:2.8.1',
        ttyEnabled: true,
        command: 'cat'),
],
envVars: [
    envVar(key: 'DOCKER_CONFIG', value: '/etc/docker')
],
volumes: [
    hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock'),
    secretVolume(secretName: 'soloio-docker-hub', mountPath: '/etc/docker'),
    secretVolume(secretName: 'soloio-github', mountPath: '/etc/github'),
    secretVolume(secretName: 'ilackarms-kubeconfig', mountPath: '/etc/kube/'),
    secretVolume(secretName: 'soloio-aws', mountPath: '/etc/aws/')
]) {

    properties([
        parameters ([
            stringParam(
                defaultValue: '0',
                description: 'Skip testing stage',
                name: 'SKIP_TESTS'),
            stringParam(
                defaultValue: 'v0.1.7-104',
                description: 'Image tag of envoy container to use',
                name: 'ENVOY_IMAGE_TAG'),
            stringParam(
                defaultValue: '',
                description: 'config context for kubectl to use',
                name: 'KUBECTL_CONTEXT'),
            stringParam(
                defaultValue: '1',
                description: 'Run kubernetes tests',
                name: 'RUN_KUBE_TESTS'),
            stringParam(
                defaultValue: '1',
                description: 'Run consul tests',
                name: 'RUN_CONSUL_TESTS'),
            stringParam(
                defaultValue: 'gloo gloo-api gloo-plugins gloo-k8s-service-discovery gloo-ingress-controller gloo-function-discovery gloo-install gloo-storage  gloo-testing',
                description: 'gloo projects to build and test',
                name: 'GLOO_PROJECTS'),
        ])
    ])

    node('gloo-builder') {
        stage('init projects') {
            container('jenkins') {
                echo 'Cloning repos'
                sh '''#!/bin/bash
                    rm -rf ${GOPATH}/src/
                    mkdir -p ${GOPATH}/src/github.com/solo-io/
                    cd ${GOPATH}/src/github.com/solo-io/
                    for i in ${GLOO_PROJECTS}; do
                        git clone https://github.com/solo-io/$i
                        cd $i
                        (dep ensure -v -vendor-only || true)
                        cd ..
                    done
                '''
            }
        }
        stage('test') {
            container('jenkins') {
                echo 'Running tests'
                sh '''#!/bin/bash
                    mkdir -p ${HOME}/.kube/
                    cp /etc/kube/* ${HOME}/.kube/
                    mkdir -p ${HOME}/.aws/
                    cp /etc/aws/* ${HOME}/.aws/
                    cd ${GOPATH}/src/github.com/solo-io/
                    echo "WARNING: REMOVING TESTS"
                    rm gloo/internal/control-plane/xds/*_test.go
                    rm gloo/pkg/secretwatcher/vault/*_test.go
                    export DISABLE_COLOR=1
                    if [[ $SKIP_TESTS -ne "1" ]]; then
                        ginkgo -r --noColor .
                    fi
                '''
            }
        }
        stage('build images') {
            container('jenkins') {
                echo 'Building images'
                sh '''#!/bin/bash
                    cd ${GOPATH}/src/github.com/solo-io/
                    for i in ${GLOO_PROJECTS}; do
                        cd $i
                        if [[ -f Dockerfile ]]; then
                            rm -f $i
                            make docker
                            TAG=$(docker images | grep "$i.*$(cat version) " | awk 'NR==1{print $2}')
                            docker tag soloio/$i:$TAG soloio/$i:$TAG-$BUILD_NUMBER
                            docker push soloio/$i:$TAG-$BUILD_NUMBER
                            sed -i "s@image: soloio/$i:.*@image: soloio/$i:$TAG-$BUILD_NUMBER@g" ${GOPATH}/src/github.com/solo-io/gloo-install/kube/install.yaml
                        fi
                        cd ..
                    done

                    # just re-tag and push new Envoy image
                    # use gloo's tag to tag envoy as well
                    TAG=$(docker images | grep "soloio/gloo.*-${BUILD_NUMBER}" | awk 'NR==1{print $2}')

                    docker pull soloio/envoy:$ENVOY_IMAGE_TAG
                    docker tag soloio/envoy:$ENVOY_IMAGE_TAG soloio/envoy:$TAG
                    docker push soloio/envoy:$TAG
                    sed -i "s@image: soloio/envoy:.*@image: soloio/envoy:$TAG@g" ${GOPATH}/src/github.com/solo-io/gloo-install/kube/install.yaml
                '''
            }
        }
        stage('push new install') {
            container('jenkins') {
                sh '''#!/bin/bash
                    cd ${GOPATH}/src/github.com/solo-io/
                    cp /etc/github/id_rsa $PWD
                    chmod 400 $PWD/id_rsa
                    export GIT_SSH_COMMAND="ssh -i $PWD/id_rsa -o 'StrictHostKeyChecking no'"
                    cd gloo-install
                    git checkout -b jenkins-$BUILD_NUMBER
                    git add kube/install.yaml
                    git config --global user.email "bot@soloio.com"
                    git config --global user.name "Solo Buildbot"
                    git commit -am "Jenkins: updated for jenkins-$BUILD_NUMBER"
                    git remote set-url origin git@github.com:solo-io/gloo-install.git
                    git push -u origin jenkins-$BUILD_NUMBER
                    rm ../id_rsa
                ''' 
            }
        }
    }
}
